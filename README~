Files that come in this plugin:
 - CMakeLists.txt   : main CMake configuration file for the plugin
 - FindHOOMD.cmake  : script to find a HOOMD-Blue installation to link against
 - README           : This file
 - cppmodule        : Directory containing C++ and CUDA source code that interacts with HOOMD
 - pymodule         : Directory containing python UI level source code that drives the C++ module
 - doc		    : required for HOOMD-Blue's autodocumention but not used for this plugin

-----COMPILING THE PLUGIN-----

To compile this plugin, follow steps similar to those in compiling HOOMD-Blue. The process of finding a HOOMD 
installation to link to will be fully automatic IF you have hoomd_install_dir/bin in your PATH when running ccmake.

Note that plugins can only be built against a hoomd build that has been installed via a package or compiled and then
installed via 'make install'. Plugins can only be built against hoomd when it is built as a shared library.

$ mkdir build
$ cd build
$ cmake /path/to/MutualDipole (or cmake ../)
(follow normal cmake steps)
$ make -j6
$ make install

If hoomd is not in your PATH, you can specify the root using
$ cmake /path/to/MutualDipole -DHOOMD_ROOT=/path/to/hoomd
where ${HOOMD_ROOT}/bin/hoomd is where the hoomd executable is installed

By default, make install will install the plugin into
${HOOMD_ROOT}/lib/hoomd/python_module/hoomd_plugins/MutualDipole
This works if you have 'make install'ed hoomd into your home directory. 

If hoomd is installed in a system directory (such as via an rpm or deb package), then you can still use plugins.
Delete the build directory and start over. Set the environment variable HOOMD_PLUGINS_DIR in your .bash_profile
 - export HOOMD_PLUGINS_DIR=${HOME}/hoomd_plugins  # as an example
When running cmake, add -DHOOMD_PLUGINS_DIR=${HOOMD_PLUGINS_DIR} to the options
 - cmake /path/to/MutualDipole -DHOOMD_PLUGINS_DIR=${HOOMD_PLUGINS_DIR}
Now, 'make install' will install the plugins into ${HOOMD_PLUGINS_DIR} and hoomd, when launched, will look there
for the plugins.

-----DOCUMENTATION FOR THE PLUGIN-----

This plugin creates a new class "MutualDipole", which extends the "ForceCompute" class from HOOMD_Blue.  When the class is created, it adds a new force to be computed in HOOMD-Blue: the electric/magnetic force on polarizable particles in an externally applied field.  The particles are polarized by the external field and by the disturbance fields generated by other particle's dipole moments.  Because the particle dipoles are all mutually coupled, the plugin solves a system of linear equations to find all of the particle dipoles simultaneously.  Once the dipole moments are calculated, the force on each particle is then computed.  

The particles are assumed to all be spheres with the same radius 1 (in dimensionless units).  The conductivity of each particle may be different and the fluid/solvent has a conductivity of 1 (in dimensionless units).  Mixtures of nonpolarizeable and polarizeable particles may be used, and the plugin will ignore the nonpolarizeable particles.  System parameters, including the direction and strength of the applied field, can be changed over the course of a simulation.  The computation time scales approximately linearly with the number of particles up to 1e6 particles (linear scaling may hold for even more particles but we did not test this) and logarithmically with the inverse of the error tolerance.  Mutual polarization can be turned off so that the particles are only polarized by the external field and the dipole moments are constant over the course of the simulation. 

class MutualDipole.compute.MutualDipole(group, conductivity, field, xi = 0.5, errortol = 1e-3, fileprefix = "", period = "0", constantdipoleflag = "0")

	Parameters:

	group (hoomd.group) -- Group of particles for which to compute the electric/magnetic dipoles and forces.  This is referred to as the "active" group throughout the comments in the code.  group can be any subset of particles, but it cannot be empty.  group.all is the HOOMD group for all particles.

	conductivity (float list) -- Conductivity of each of the active particles in units of fluid conductivity (lambda_f).  The length of the list is equal to the number of active particles, i.e. the number of particles in group.  "Conductivity" is used generically to refer to either electric permittivity in the case of dielectric suspensions of magnetic permeability in the case of paramagnetic suspensions.  Perfect conductors have a conductivity of float("inf") while perfect insulators have a conductivity of 0.  A conductivity of 1 means that the particles and fluid have the same conductivity and the particles do not polarize in an applied field.  In this plugin, no particle's conductivity can be set to 1 because it causes terms to diverge.  Instead, particles with conductivity of 1 should not be included in the active group because they do not polarize and would exert/feel no electric/magnetic forces.  NOTE: The limit of particle conductivity approaching 1 corresponds to the constant dipole model, where the dipole moments of particles do not mutually polarize each other.  If the constant dipole model is desired, constantdipoleflag must be set to 1.  In this case, conductivity and field are redundant, and it is only the product conductivity*field that is important.  The particle conductivity can be set arbitrarily (but not 1) as long as the product conductivity*field is the desired value.

	field (float list) -- A list of the x, y, and z components of the externally applied electric/magnetic field in units of (E/(a^3*lambda_f))^(1/2), where E is the energy scale of the simulation and a is the particle radius.  While the energy scale in the simulation can be chosen arbitrarily, the length scale of the simulation MUST be the particle radius, i.e. the plugin assumes a particle radius of 1 in dimensionless units.  This is important for the numerical precision of the plugin.

	xi (float) -- Ewald splitting parameter that controls the convergence rates of the real space and wave space Ewald sums.  If xi is increased, the wave space sum converges slower while the real space sum converges faster and more time is spent computing the wave space sum.  If xi is decreased, the wave space sum converges faster while the real space sum converges slower and more time is spent computing the real space sum.  xi can be optimized to apportion the computation time between the two sums so that the total computation time is minimized.  The default value of 1/2 distributes the computation time more or less equally between the two sums and is typically a good choice.  Depending on the system size, concentration, or structure, the optimal xi can change.  The optimal xi is nearly always in a range of 0.1 < xi < 1.

	errortol (float) -- Desired error tolerance for the numerical method.  This is the possible maximum error in each element of the matrix/vector product calculation.  This is also the error tolerance used for the iterative solution to the linear system of equations for the particle dipoles.  This tolerance should be treated as an error ESTIMATE and not a rigorous bound.  The true error in the particle dipoles and forces is affected by the condition number of the matrix in the linear system of equations, and it is possible for the error to accumulate for large numbers of particles.  The numerical method is spectrally accurate, so the computation time is logarithmic in the error tolerance (i.e. an order of magnitude decrease in the error tolerance corresponds to a linear increase in the computation time).

	fileprefix (string) -- Prefix for the names of output files containing the particle positions, dipole moments, and electric/magnetic forces.  The frame number and file extension are automatically appended to the specified fileprefix each time an output file is written.  fileprefix = "output" would generate file names like output.0000000000.txt, output.0000000100.txt, output.0000000200.txt, ....

	period (int) -- Number of time steps between writing output files.  A file containing the particle positions, dipole moments, and electric/magnetic forces will be output on the current time step and then every period time steps.  If period = 0, output files are not written. 

	constantdipoleflag (int) -- Indicates whether or not to turn off the mutual dipole functionality and use the constant dipole model.  If constantdipoleflag = 0, the mutual dipole model is used and particles can mutually polarize one another.  This is the default setting.  If constantdipoleflag = 1, the mutual dipole model is turned off and the constant dipole model is used instead.  In the constant dipole model, the dipole moment of each particle is 4*pi*beta*field, where beta = (conductivity - 1)/(conductivity + 2).  The units of the dipole are (a^3*lambda_f*E)^(1/2), where a is the particle radius, lambda_f is the fluid conductivity, and E is the energy scale of the simulation.  Particles do not mutually polarize one another and the value of each particles dipole moment remains constant throughout the simulation.  Because the plugin does not need to solve a linear system of equations for the particle dipoles, the computation time is decreased for the constant dipole model compared to the mutual dipole model, usually by a factor of 2 or 3.  The difference in computation time depends on the number of matrix/vector products needed to iteratively solve for the dipoles in the mutual dipole model.  The constant dipole model is significantly less accurate than the mutual dipole model and does not capture key qualitative features of real suspensions, so this model should be used cautiously. 
 
	Functions:

	MutualDipole.update_field(field)

	Change the externally applied field.  Only updates the field and particle dipoles and does not recompute any other parameters.  Note that for constantdipoleflag = 1 (constant dipole model), this changes the particle dipole moments.  This function is faster than update_parameters, so use this if only the field/dipole is changing.

		Parameters:

		field (float list) -- New externally applied field in units of (E/(a^3*lambda_f))^(1/2), where E is the energy scale of the simulation, a is the particle radius, and lambda_f is the fluid conductivity.

	MutualDipole.update_parameters(conductivity, field, fileprefix = "", period = 0, constantdipoleflag = 0)

	Change/update simulation parameters.  This recalculates all precomputed quantities, including tables for the real space and wave space sums.  This function must be called any time the size or shape of the simulation box changes throughout the course of the simulation.  This function is slower than update_field, so do not use update_parameters if only the field/dipole is changing. The first two arguments must be specified, even if they are not changing. The last three arguments revert back to their default values if they are not specified. 

		Parameters:

		conductivity (float list) -- New conductivity of each of the active particles in units of fluid conductivity (lambda_f).  This must be specified even if the conductivity does not change.

		field (float list) -- New externally applied field in units of (E/(a^3*lambda_f))^(1/2), where E is the energy scale of the simulation, a is the particle radius, and lambda_f is the fluid conductivity.  This must be specified even if the conductivity does not change.

		fileprefix (string) -- New prefix for output file names.  This reverts back to the default value ("") if it is not specified.

		period (int) -- New number of time steps between writing output files.  This reverts back to the default value (0) if it is not specified.

		constantdipoleflag (int) -- New indicator for the mutual dipole versus constant dipole models. This reverts back to the default value (0) if it is not specified.

-----EXAMPLE PYTHON SCRIPT-----

from hoomd_script import *
from hoomd_plugins import MutualDipole

# Other HOOMD-Blue code setting up
# .
# .
# .
# a simulation with N particles

mutdip = MutualDipole.compute.MutualDipole(group=group.all(), conductivity=[float("inf")]*N, field=[0.0, 0.0, 1.0], xi=0.5, errortol=1e-3, fileprefix="output", period=100, constantdipoleflag=0)

run(1000)

mutdip.update_field(field=[0.0, 0.0, 0.5])

run(1000)



